{"version":3,"sources":["header.jsx","note.jsx","createnote.jsx","footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Note","props","className","title","content","onClick","event","preventDefault","deleteitem","id","CreateNote","useState","note","setNote","inputevent","target","name","value","prev","type","onChange","placeholder","autoComplete","rows","column","passnote","Footer","year","Date","getFullYear","App","additem","setadditem","ondelete","olddata","filter","currentdata","indx","map","val","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAUeA,G,YARA,WACX,OAAO,oCACH,gCACI,2CCmBGC,EAtBF,SAACC,GAOV,OAAO,oCACH,yBAAKC,UAAU,iCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAcD,EAAME,OAElC,uBAAGD,UAAU,aAAaD,EAAMG,SAEhC,4BAAQF,UAAU,kBAAkBG,QAbjC,SAACC,GAChBA,EAAMC,iBACNN,EAAMO,WAAWP,EAAMQ,MAWX,e,cCkDLC,EAjEI,SAACT,GAAW,IAAD,EACLU,mBAAS,CAC1BR,MAAM,GACNC,QAAQ,KAHc,mBACnBQ,EADmB,KACdC,EADc,KAMpBC,EAAa,SAACR,GAAS,MAGJA,EAAMS,OAApBC,EAHkB,EAGlBA,KAAKC,EAHa,EAGbA,MAEZJ,GAAQ,SAACK,GACL,OAAO,2BACAA,GADP,kBAEKF,EAAMC,QAcnB,OAAO,oCACH,yBAAKf,UAAU,iBACX,0BAAMA,UAAU,cAChB,yBAAKA,UAAU,cACX,2BACAiB,KAAK,OACLH,KAAK,QACLI,SAAUN,EACVG,MAAOL,EAAKT,MACZkB,YAAY,QACZC,aAAa,MACbpB,UAAU,kBAGd,yBAAKA,UAAU,cACX,8BACAqB,KAAK,GAAGC,OAAO,GACfR,KAAK,UACLI,SAAUN,EACVG,MAAOL,EAAKR,QACZiB,YAAY,eACZnB,UAAU,kBAGd,yBAAKA,UAAU,eACf,4BACAiB,KAAK,SACLd,QApCS,SAACC,GACdL,EAAMwB,SAASb,GACfC,EAAQ,CACJV,MAAM,GACNC,QAAQ,KAEZE,EAAMC,kBA+BFL,UAAU,oBAHV,iBC1CGwB,EAXA,WACX,IAAMC,GAAO,IAAIC,MAAOC,cAExB,OAAO,oCACH,gCACI,qDACA,2CAAiBF,EAAjB,QCuCGG,MAvCf,WAAgB,IAAD,EACenB,mBAAS,IADxB,mBACPoB,EADO,KACCC,EADD,KAQPC,EAAW,SAACxB,GAChBuB,GAAW,SAACE,GAAD,OACTA,EAAQC,QAAO,SAACC,EAAYC,GAC1B,OAAOA,GAAM5B,SAKnB,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYuB,SAhBA,SAACb,GACboB,GAAW,SAACd,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAgBN,UAelB,yBAAKV,UAAU,4BACf,yBAAKA,UAAU,OAEd6B,EAAQO,KAAI,SAACC,EAAIC,GAChB,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACL/B,GAAI+B,EACJrC,MAAOoC,EAAIpC,MACXC,QAASmC,EAAInC,QACbI,WAAYyB,SAKd,kBAAC,EAAD,QC9BcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.698c967e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return <>\r\n        <header>\r\n            <h1>DMNotes</h1>\r\n        </header>\r\n    </>\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Note = (props) => {\r\n\r\n    const deletenote = (event) =>{\r\n        event.preventDefault();\r\n        props.deleteitem(props.id);\r\n    } \r\n\r\n    return <>\r\n        <div className=\"note col-md-6 col-lg-4 d-flex\">\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{props.title}</h5>\r\n                    {/* <h5 className=\"card-title\">{props.title}</h5> */}\r\n                    <p className=\"card-text\">{props.content}</p>\r\n                    {/* <p className=\"card-text\">{props.content}</p> */}\r\n                    <button className=\"btn btn-success\" onClick={deletenote} >DELETE</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n};\r\n\r\nexport default Note;","import React, { useState } from 'react';\r\n\r\nconst CreateNote = (props) => {\r\n    const [note,setNote]=useState({\r\n        title:\"\",\r\n        content:\"\"\r\n    });\r\n\r\n    const inputevent = (event) =>{\r\n        // const value = event.target.value;\r\n        // const name = event.target.name;\r\n        const {name,value} = event.target;\r\n\r\n        setNote((prev) =>{\r\n            return {\r\n                ...prev,\r\n                [name]:value,\r\n            };\r\n        });\r\n    }\r\n\r\n    const addevent = (event) =>{\r\n        props.passnote(note);\r\n        setNote({\r\n            title:\"\",\r\n            content:\"\"\r\n        }); \r\n        event.preventDefault();\r\n    }\r\n\r\n    return <>\r\n        <div className=\"mainnote my-5\">\r\n            <form className=\"createnote\">\r\n            <div className=\"form-group\">\r\n                <input \r\n                type=\"text\"\r\n                name=\"title\"\r\n                onChange={inputevent} \r\n                value={note.title} \r\n                placeholder=\"Title\" \r\n                autoComplete=\"off\" \r\n                className=\"form-control\"\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <textarea \r\n                rows=\"\" column=\"\" \r\n                name=\"content\"\r\n                onChange={inputevent} \r\n                value={note.content} \r\n                placeholder=\"Write a Note\" \r\n                className=\"form-control\" \r\n                ></textarea>\r\n            </div>\r\n            <div className=\"text-center\">\r\n            <button \r\n            type=\"submit\" \r\n            onClick={addevent}\r\n            className=\"btn button-small\"\r\n            >ADD NOTE\r\n            </button>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    </>\r\n};\r\n\r\nexport default CreateNote;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    const year = new Date().getFullYear();\r\n    \r\n    return <>\r\n        <footer>\r\n            <h5>Made by Dibyendu Maji</h5>\r\n            <p>Copyrights @ {year} </p>\r\n        </footer>\r\n    </>\r\n};\r\n\r\nexport default Footer;","import React, { useState } from 'react';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport Header from './header';\nimport Note from './note';\nimport CreateNote from './createnote';\nimport Footer from './footer';\n\nfunction App() {\n  const[additem,setadditem] = useState([]);\n\n  const addnote = (note) => {\n      setadditem((prev)=>{\n        return [...prev,note];\n      });\n    }\n  const ondelete = (id) =>{\n    setadditem((olddata) =>\n      olddata.filter((currentdata,indx) => {\n        return indx!=id;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <CreateNote passnote={addnote} />\n      <div className=\"notegroup container my-5\">\n      <div className=\"row\">\n      {/* <Note /> */}\n      {additem.map((val,index) => {\n        return (<Note\n        key={index}\n        id={index}\n        title={val.title}\n        content={val.content} \n        deleteitem={ondelete}\n        />);\n      })}\n      </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n"],"sourceRoot":""}